services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    restart: always
    ports:
      - "${SERVER_PORT:-8080}:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - news-feed-network

  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: always
    env_file: .env
    environment:
      POSTGRES_DB: ${DB_NAME:-news_feed}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - news-feed-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-news_feed}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - news-feed-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  migrate:
    image: migrate/migrate
    container_name: news-feed-migrate
    volumes:
      - ./migrations:/migrations
    environment:
      DATABASE_URL: postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@${DB_HOST:-postgres}:${DB_PORT:-5432}/${DB_NAME:-news_feed}?sslmode=${DB_SSL_MODE:-disable}
    command: ["-path", "/migrations", "-database", "postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@${DB_HOST:-postgres}:${DB_PORT:-5432}/${DB_NAME:-news_feed}?sslmode=${DB_SSL_MODE:-disable}", "up"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - news-feed-network

networks:
  news-feed-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
