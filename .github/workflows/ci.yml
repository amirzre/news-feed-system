name: CI Pipeline

on:
  pull_request:
    branches: [ main, development ]
  push:
    branches: [ main, development ]

env:
  GO_VERSION: '1.25'
  POSTGRES_PASSWORD: postgres
  POSTGRES_USER: postgres
  POSTGRES_DB: news_feed_test

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Install golang-migrate
      run: |
        curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz
        sudo mv migrate /usr/local/bin/
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
    
    - name: Wait for Redis
      run: |
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
    
    - name: Run database migrations
      run: |
        migrate -path migrations -database "postgres://postgres:postgres@localhost:5432/news_feed_test?sslmode=disable" up
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: news_feed_test
    
    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Install linting tools
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        go install honnef.co/go/tools/cmd/staticcheck@latest
    
    - name: Run linter
      run: golangci-lint run --timeout=5m
    
    - name: Run static analysis
      run: staticcheck ./...
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'gosec-report.sarif'
      continue-on-error: true
    
    - name: Run tests
      run: go test -race -v ./...
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: news_feed_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ""
        APP_ENV: test
    
    - name: Build application
      run: go build -v -o bin/main ./cmd/server
    
    - name: Test application startup
      run: |
        timeout 10s ./bin/main || if [[ $? == 124 ]]; then echo "App started successfully"; else exit 1; fi
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: news_feed_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        APP_ENV: test
        PORT: 8080
